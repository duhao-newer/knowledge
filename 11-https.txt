1、https的出生是为了解决http在某些方面的缺陷，其中最主要的原因是http不安全；
    http在传输数据的过程中都是明文传输，很容易被部分人给截获，造成数据泄露
    https = http + SSL/TLS;
    HTTPS采用的对称加密和非对称加密算法的结合；使用非对称加密对对称加密的密匙进行加密，保证密匙的可靠性；
    使用通过加密后的密匙对数据进行加密，使用对称加密进行客户端和服务器的数据传输；
    HTTPS 的整个通信过程可以分为两大阶段：证书验证和数据传输阶段，数据传输阶段又可以分为非对称加密和对称加密两个阶段。
  证书
    采用 HTTPS 协议的服务器必须要有一套数字 CA (Certification Authority)证书，证书是需要申请的；
    颁发证书的机构在发证书的时候会同时给一对密匙，私钥和公钥;
    私钥由服务端自己保存，不可泄漏。
    公钥则是附带在证书的信息中，可以公开的。
    证书本身也附带一个证书电子签名，这个签名用来验证证书的完整性和真实性，可以防止证书被篡改。
      数字(电子)签名
        服务器对证书内容进行信息摘要计算 (常用算法有 SHA-256等)，得到摘要信息，再用私钥把摘要信息加密，就得到了数字签名

  证书验证
    服务器响应客户端请求，将证书传递给客户端，证书包含公钥和大量其他信息，比如证书颁发机构信息，公司信息和证书有效期等。 
    客户端解析证书并对其进行验证。如果证书不是可信机构颁布，或者证书中的域名与实际域名不一致，或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。 
      具体过程：
        检查数字签名
            服务器把数字证书连同数字签名一起发送给客户端
            客户端用公钥解密数字签名，得到摘要信息
            客户端用相同的信息摘要算法重新计算证书摘要信息，然后对这两个摘要信息进行比对，如果相同，则说明证书未被篡改，否则证书验证失败
        验证证书链
            也称为证书路径，是用于认证实体合法身份的证书列表，具体到 HTTPS 通信中，就是为了验证服务器的合法身份。之所以使用证书链，是为了保证根证书 (root CA certificate)的安全，中间层可以看做根证书的代理，起到了缓冲的作用
        检查证书的有效期
        检查证书的撤回状态 (撤回代表证书已失效)
  数据传输
    如果证书没有问题，客户端就会从服务器证书中取出服务器的公钥A。然后客户端还会生成一个随机码 KEY，并使用公钥A将其加密。
    客户端把加密后的随机码 KEY 发送给服务器；
    服务器在收到随机码 KEY 之后会使用私钥B将其解密。
    服务器使用密钥 (随机码 KEY)对数据进行对称加密并发送给客户端，客户端使用相同的密钥 (随机码 KEY)解密数据。
      随机码 KEY
      上面的随机码并不是最终的KEY值，而是其中的一部分；具体生成过程如下：
      SSL / TLS 握手详细过程
        1、"client hello"消息：客户端通过发送"client hello"消息向服务器发起握手请求，该消息包含了客户端所支持2、的 TLS 版本和密码组合以供服务器进行选择，还有一个"client random"随机字符串。
        3、 "server hello"消息：服务器发送"server hello"消息对客户端进行回应，该消息包含了数字证书，服务器选择的密码组合和"server random"随机字符串。
        4、验证：客户端对服务器发来的证书进行验证，确保对方的合法身份
        5、客户端向服务器发送另一个随机字符串"premaster secret (预主密钥)"，这个字符串是经过服务器的公钥加密过的，只有对应的私钥才能解密。
        6、使用私钥：服务器使用私钥解密"premaster secret"。
        7、生成共享密钥：客户端和服务器均使用 client random，server random 和 premaster secret，并通过相同的算法生成相同的共享密钥 KEY。
        8、客户端就绪：客户端发送经过共享密钥 KEY加密过的"finished"信号。
        9、服务器就绪：服务器发送经过共享密钥 KEY加密过的"finished"信号。
    双方使用对称加密愉快地传输所有数据。